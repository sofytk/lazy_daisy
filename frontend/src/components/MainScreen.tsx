import React, { useState, useEffect } from 'react'
import { User } from '../types/game'
import { Leaf, Settings, ShoppingBag, User as UserIcon } from 'lucide-react'
import { tg } from '../telegram'
import { daisiesAPI, resultsAPI } from '../services/api'
import './MainScreen.css'

interface MainScreenProps {
  user: User
  onScreenChange: (screen: 'main' | 'shop' | 'profile') => void
  onPayment: (amount: number) => void
}

const MainScreen: React.FC<MainScreenProps> = ({ user, onScreenChange, onPayment }) => {
  const [daisiesLeft, setDaisiesLeft] = useState(2)
  const [isCollecting, setIsCollecting] = useState(false)
  const [floatingTexts, setFloatingTexts] = useState<Array<{id: number, text: string, x: number, y: number}>>([])
  const [petalCount, setPetalCount] = useState(8)
  const [lastResult, setLastResult] = useState<string>('')
  const [gameOver, setGameOver] = useState(false)

  const handleDaisyClick = () => {
    if (isCollecting || gameOver) return
    
    setIsCollecting(true)
    
    // –í–∏–±—Ä–∞—Ü–∏—è
    if (tg?.HapticFeedback) {
      tg.HapticFeedback.impactOccurred('medium')
    }
    
    // –û—Ç—Ä—ã–≤–∞–µ–º –ª–µ–ø–µ—Å—Ç–æ–∫
    setPetalCount(prev => Math.max(0, prev - 1))
    
    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç
    const texts = user.custom_texts || ['–ª—é–±–∏—Ç', '–Ω–µ –ª—é–±–∏—Ç']
    const randomText = texts[Math.floor(Math.random() * texts.length)]
    setLastResult(randomText)
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–ª—ã–≤–∞—é—â–∏–π —Ç–µ–∫—Å—Ç
    const newFloatingText = {
      id: Date.now(),
      text: randomText,
      x: Math.random() * 200 + 50, // –°–ª—É—á–∞–π–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –≤–æ–∫—Ä—É–≥ —Ä–æ–º–∞—à–∫–∏
      y: Math.random() * 200 + 50
    }
    
    setFloatingTexts(prev => [...prev, newFloatingText])
    
    // –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setFloatingTexts(prev => prev.filter(t => t.id !== newFloatingText.id))
    }, 2000)
    
    // –ê–Ω–∏–º–∞—Ü–∏—è —Å–±–æ—Ä–∞ —Ä–æ–º–∞—à–∫–∏
    setTimeout(async () => {
      setIsCollecting(false)
      // –µ—Å–ª–∏ –ª–µ–ø–µ—Å—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å ‚Äî game over
      if (petalCount - 1 <= 0) {
        setGameOver(true)
        const newLeft = Math.max(0, daisiesLeft - 1)
        setDaisiesLeft(newLeft)
        try { await daisiesAPI.setDaisiesLeft(newLeft) } catch {}
        try { await resultsAPI.saveResult(randomText) } catch {}
      }
    }, 1000)
  }

  useEffect(() => {
    // load daisies left and initialize fresh flower
    (async () => {
      try {
        const data = await daisiesAPI.getDaisiesLeft()
        if (typeof data.daisies_left === 'number') {
          setDaisiesLeft(data.daisies_left)
        }
      } catch {}
      const count = Math.floor(Math.random() * 10) + 6
      setPetalCount(count)
      setGameOver(false)
      setLastResult('')
    })()
  }, [])

  const handleCustomize = () => {
    onScreenChange('shop')
  }

  const handleBuyDaisies = async () => {
    try {
      const data = await daisiesAPI.buyOne()
      setDaisiesLeft(data.daisies_left)
    } catch (e: any) {
      // –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
      onPayment(50)
    }
  }

  const handleShare = () => {
    // –†–∏—Å—É–µ–º –∫–∞–Ω–≤–∞—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const canvas = document.createElement('canvas')
    const size = 600
    canvas.width = size
    canvas.height = size
    const ctx = canvas.getContext('2d')!

    // –§–æ–Ω
    const grad = ctx.createLinearGradient(0, 0, size, size)
    grad.addColorStop(0, '#87CEEB')
    grad.addColorStop(1, '#98FB98')
    ctx.fillStyle = grad
    ctx.fillRect(0, 0, size, size)

    // –†–æ–º–∞—à–∫–∞ —Ü–µ–Ω—Ç—Ä (—Ü–≤–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–∫–∏–Ω–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    const cx = size / 2
    const cy = size / 2
    const centerR = 90
    const currentSkin = (user as any).current_skin_color || '#FFD700'
    ctx.fillStyle = currentSkin
    ctx.beginPath()
    ctx.arc(cx, cy, centerR, 0, Math.PI * 2)
    ctx.fill()

    // –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    ctx.fillStyle = '#333'
    ctx.font = 'bold 40px Arial, sans-serif'
    ctx.textAlign = 'center'
    ctx.textBaseline = 'middle'
    ctx.fillText('–†–µ–∑—É–ª—å—Ç–∞—Ç:', cx, cy - 60)
    ctx.font = 'bold 56px Arial, sans-serif'
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    const resultText = lastResult || '–ª—é–±–∏—Ç / –Ω–µ –ª—é–±–∏—Ç'
    ctx.fillText(resultText, cx, cy)
    ctx.font = '24px Arial, sans-serif'
    ctx.fillStyle = '#1b5e20'
    const username = user.username ? `@${user.username}` : `${user.first_name || ''}`.trim()
    ctx.fillText(`–ò–≥—Ä–∞–π –≤ "–†–æ–º–∞—à–∫–∞" –≤ Telegram ${username}`, cx, cy + 70)

    const dataUrl = canvas.toDataURL('image/png')

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞—É–Ω–¥–∞ (—É–∂–µ –µ—Å—Ç—å)
    // Telegram WebApp share (–∫–∞–∫ —Å—Å—ã–ª–∫–∞) –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π —à–∞—Ä–∏–Ω–≥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
    if (navigator.share && (navigator as any).canShare?.({ files: [] })) {
      fetch(dataUrl)
        .then(res => res.blob())
        .then(blob => {
          const file = new File([blob], 'romashka.png', { type: 'image/png' })
          ;(navigator as any).share({ files: [file], title: '–ò–≥—Ä–∞ –†–æ–º–∞—à–∫–∞' }).catch(() => {})
      })
    } else {
      const link = document.createElement('a')
      link.href = dataUrl
      link.download = 'romashka.png'
      link.click()
    }
  }

  return (
    <div className="main-screen">
      {/* Header */}
      <div className="header">
        <button className="customize-btn" onClick={handleCustomize}>
          <span>‚úèÔ∏è</span>
          –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å
        </button>
        <div className="balance-badge">
          <Leaf size={16} />
          <span>{user.balance}</span>
        </div>
      </div>

      {/* Main Content */}
      <div className="main-content">
        <div 
          className={`daisy-container ${isCollecting ? 'collecting' : ''}`}
          onClick={handleDaisyClick}
        >
          <div className="daisy">
            <div className={`daisy-center ${gameOver ? 'enlarged' : ''}`} style={{ background: (user as any).current_skin_color || '#FFD700' }}>
              {gameOver && (
                <div className="result-text">{lastResult}</div>
              )}
            </div>
            <div className="daisy-petals">
              {Array.from({ length: petalCount }).map((_, i) => {
                const angle = (360 / Math.max(1, petalCount)) * i
                // –†–∞–¥–∏—É—Å –≤—ã–Ω–æ—Å–∞ –ª–µ–ø–µ—Å—Ç–∫–∞ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞. –ü–æ–¥–æ–±—Ä–∞–Ω –ø–æ–¥ —Ä–∞–∑–º–µ—Ä—ã –≤ CSS
                const radius = 85
                return (
                  <div
                    key={i}
                    className="petal"
                    style={{ transform: `translate(-50%, -50%) rotate(${angle}deg) translateY(-${radius}px)` }}
                  />
                )
              })}
            </div>
          </div>
          
          {/* –í—ã–ø–ª—ã–≤–∞—é—â–∏–µ —Ç–µ–∫—Å—Ç—ã */}
          {floatingTexts.map((floatingText) => (
            <div
              key={floatingText.id}
              className="floating-text"
              style={{
                left: `${floatingText.x}px`,
                top: `${floatingText.y}px`
              }}
            >
              {floatingText.text}
            </div>
          ))}
        </div>

        {/* Floating Buttons */}
        <div className="floating-buttons">
          <div className="daisies-left">
            <span>–û—Å—Ç–∞–ª–æ—Å—å {daisiesLeft} —Ä–æ–º–∞—à–∫–∏</span>
          </div>
          
          <div className="action-buttons">
            {gameOver && daisiesLeft > 0 && (
              <button className="share-btn" onClick={handleShare}>
                –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
              </button>
            )}
            {gameOver && daisiesLeft > 0 && (
              <button className="share-btn" onClick={() => {
                const count = Math.floor(Math.random() * 10) + 6
                setPetalCount(count)
                setGameOver(false)
                setLastResult('')
              }}>
                –ó–∞–Ω–æ–≤–æ
              </button>
            )}
            {gameOver && daisiesLeft === 0 && (
              <button className="buy-btn" onClick={handleBuyDaisies}>
                <Leaf size={16} />
                –ö—É–ø–∏—Ç—å –∑–∞ 50
              </button>
            )}
          </div>
        </div>
      </div>

      {/* Bottom Navigation */}
      <div className="bottom-nav">
        <button 
          className={`nav-btn ${true ? 'active' : ''}`}
          onClick={() => onScreenChange('main')}
        >
          <span>üåº</span>
        </button>
        <button 
          className="nav-btn"
          onClick={() => onScreenChange('shop')}
        >
          <ShoppingBag size={20} />
        </button>
        <button 
          className="nav-btn"
          onClick={() => onScreenChange('profile')}
        >
          <UserIcon size={20} />
        </button>
      </div>
    </div>
  )
}

export default MainScreen
